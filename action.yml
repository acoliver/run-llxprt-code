# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: 'Run LLxprt Code'
author: 'VybeStack'
description: |-
  Invoke LLxprt Code from a GitHub Action.

inputs:
  # LLxprt Code supports dual-provider mode where Gemini handles web-search/web-fetch
  # while another provider handles chat. Set gemini_api_key AND provider/api_key for this mode.
  prompt:
    description: |-
      A string passed to the LLxprt Code's [`--prompt` argument](https://github.com/acoliver/llxprt-code/blob/main/docs/cli/configuration.md#command-line-arguments).
    required: false
    default: 'You are a helpful assistant.'
  settings:
    description: |-
      A JSON string written to `.llxprt/settings.json` to configure the CLI's _project_ settings.
      For more details, see the documentation on [settings files](https://github.com/acoliver/llxprt-code/blob/main/docs/cli/configuration.md#settings-files).
    required: false
  provider:
    description: 'AI provider to use (gemini, openai, anthropic, etc.)'
    required: false
    default: 'gemini'
  model:
    description: 'Model to use for the specified provider'
    required: false
  api_key:
    description: 'API key for the specified provider'
    required: false
  api_key_file:
    description: 'Path to file containing API key for the specified provider'
    required: false
  gemini_api_key:
    description: 'Gemini API key (for backward compatibility or ServerTools when using other providers)'
    required: false
  gcp_project_id:
    description: 'The Google Cloud project ID.'
    required: false
  gcp_location:
    description: 'The Google Cloud location.'
    required: false
  gcp_workload_identity_provider:
    description: 'The Google Cloud Workload Identity Provider.'
    required: false
  gcp_service_account:
    description: 'The Google Cloud service account email.'
    required: false
  use_vertex_ai:
    description: 'A flag to indicate if Vertex AI should be used.'
    required: false
    default: 'false'
  use_gemini_code_assist:
    description: 'A flag to indicate if Gemini Code Assist should be used.'
    required: false
    default: 'false'
  llxprt_version:
    description: 'The version of LLxprt Code to install.'
    required: false
    default: 'latest'

outputs:
  summary:
    description: 'The summarized output from the LLxprt Code execution.'
    value: '${{ steps.llxprt_run.outputs.llxprt_response }}'

runs:
  using: 'composite'
  steps:
    - name: 'Configure LLxprt Code'
      if: |-
        ${{ inputs.settings != '' }}
      run: |-
        mkdir -p .llxprt/
        echo "${SETTINGS}" > ".llxprt/settings.json"
      shell: 'bash'
      env:
        SETTINGS: '${{ inputs.settings }}'

    - name: 'Authenticate to Google Cloud'
      if: |-
        ${{ inputs.gcp_workload_identity_provider != '' }}
      id: 'auth'
      uses: 'google-github-actions/auth@v2' # ratchet:exclude
      with:
        project_id: '${{ inputs.gcp_project_id }}'
        workload_identity_provider: '${{ inputs.gcp_workload_identity_provider }}'
        service_account: '${{ inputs.gcp_service_account }}'
        token_format: 'access_token'
        access_token_scopes: 'https://www.googleapis.com/auth/cloud-platform,https://www.googleapis.com/auth/userinfo.email,https://www.googleapis.com/auth/userinfo.profile'

    - name: 'Run Telemetry Collector for Google Cloud'
      if: |-
        ${{ inputs.gcp_workload_identity_provider != '' }}
      env:
        OTLP_GOOGLE_CLOUD_PROJECT: '${{ inputs.gcp_project_id }}'
        GITHUB_ACTION_PATH: '${{ github.action_path }}'
      shell: 'bash'
      run: |-
        set -euo pipefail
        mkdir -p .llxprt/
        sed "s/OTLP_GOOGLE_CLOUD_PROJECT/${OTLP_GOOGLE_CLOUD_PROJECT}/g" "${GITHUB_ACTION_PATH}/scripts/collector-gcp.yaml.template" > ".llxprt/collector-gcp.yaml"

        chmod 444 "$GOOGLE_APPLICATION_CREDENTIALS"
        docker run -d --name llxprt-telemetry-collector --network host \
          -v "${GITHUB_WORKSPACE}:/github/workspace" \
          -e "GOOGLE_APPLICATION_CREDENTIALS=${GOOGLE_APPLICATION_CREDENTIALS/$GITHUB_WORKSPACE//github/workspace}" \
          -w "/github/workspace" \
          otel/opentelemetry-collector-contrib:0.128.0 \
          --config /github/workspace/.llxprt/collector-gcp.yaml

    - name: 'Install LLxprt Code'
      id: 'install'
      env:
        LLXPRT_VERSION: '${{ inputs.llxprt_version }}'
      shell: 'bash'
      run: |-
        set -euo pipefail

        VERSION_INPUT="${LLXPRT_VERSION:-latest}"

        if [[ "${VERSION_INPUT}" == "latest" || "${VERSION_INPUT}" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9\.-]+)?(\+[a-zA-Z0-9\.-]+)?$ ]]; then
          echo "Installing LLxprt Code from npm: @vybestack/llxprt-code@${VERSION_INPUT}"
          npm install -g @vybestack/llxprt-code@"${VERSION_INPUT}"
        else
          echo "Installing LLxprt Code from GitHub: github:acoliver/llxprt-code#${VERSION_INPUT}"
          git clone https://github.com/acoliver/llxprt-code.git
          cd llxprt-code
          git checkout "${VERSION_INPUT}"
          npm install
          npm run bundle
          npm install -g .
        fi
        echo "Verifying installation:"
        if command -v llxprt >/dev/null 2>&1; then
          llxprt --version || echo "LLxprt Code installed successfully (version command not available)"
        else
          echo "Error: LLxprt Code not found in PATH"
          exit 1
        fi

    - name: 'Set provider configuration'
      shell: 'bash'
      run: |
        # Export provider configuration
        if [[ -n "${{ inputs.provider }}" ]]; then
          echo "LLXPRT_PROVIDER=${{ inputs.provider }}" >> "${GITHUB_ENV}"
        fi
        
        if [[ -n "${{ inputs.model }}" ]]; then
          echo "LLXPRT_MODEL=${{ inputs.model }}" >> "${GITHUB_ENV}"
        fi
        
        # Handle api_key - could be for any provider
        if [[ -n "${{ inputs.api_key }}" ]]; then
          echo "LLXPRT_API_KEY=${{ inputs.api_key }}" >> "${GITHUB_ENV}"
        fi
        
        if [[ -n "${{ inputs.api_key_file }}" ]]; then
          echo "LLXPRT_API_KEY_FILE=${{ inputs.api_key_file }}" >> "${GITHUB_ENV}"
        fi

    - name: 'Run LLxprt Code'
      id: 'llxprt_run'
      run: |-
        set -e
        
        # Build the llxprt command with optional flags
        LLXPRT_CMD="llxprt --yolo"
        
        # Add provider flag if specified
        if [[ -n "${LLXPRT_PROVIDER}" ]]; then
          LLXPRT_CMD="${LLXPRT_CMD} --provider ${LLXPRT_PROVIDER}"
        fi
        
        # Add model flag if specified
        if [[ -n "${LLXPRT_MODEL}" ]]; then
          LLXPRT_CMD="${LLXPRT_CMD} --model ${LLXPRT_MODEL}"
        fi
        
        # Add API key flag if specified (from api_key input)
        if [[ -n "${LLXPRT_API_KEY}" ]]; then
          LLXPRT_CMD="${LLXPRT_CMD} --key ${LLXPRT_API_KEY}"
        fi
        
        # Add API key file flag if specified
        if [[ -n "${LLXPRT_API_KEY_FILE}" ]]; then
          LLXPRT_CMD="${LLXPRT_CMD} --keyfile ${LLXPRT_API_KEY_FILE}"
        fi
        
        # Add the prompt (always required)
        LLXPRT_CMD="${LLXPRT_CMD} --prompt \"${PROMPT}\""
        
        # Execute the command and capture response
        LLXPRT_RESPONSE=$(eval ${LLXPRT_CMD})
        # Set the captured response as a step output, supporting multiline
        echo "llxprt_response<<EOF" >> "${GITHUB_OUTPUT}"
        echo "${LLXPRT_RESPONSE}" >> "${GITHUB_OUTPUT}"
        echo "EOF" >> "${GITHUB_OUTPUT}"
        echo "${LLXPRT_RESPONSE}"
      shell: 'bash'
      env:
        GEMINI_API_KEY: '${{ inputs.gemini_api_key }}'
        LLXPRT_PROVIDER: '${{ env.LLXPRT_PROVIDER }}'
        LLXPRT_MODEL: '${{ env.LLXPRT_MODEL }}'
        LLXPRT_API_KEY: '${{ env.LLXPRT_API_KEY }}'
        LLXPRT_API_KEY_FILE: '${{ env.LLXPRT_API_KEY_FILE }}'
        SURFACE: 'GitHub'
        GOOGLE_CLOUD_PROJECT: '${{ inputs.gcp_project_id }}'
        GOOGLE_CLOUD_LOCATION: '${{ inputs.gcp_location }}'
        GOOGLE_GENAI_USE_VERTEXAI: '${{ inputs.use_vertex_ai }}'
        GOOGLE_GENAI_USE_GCA: '${{ inputs.use_gemini_code_assist }}'
        GOOGLE_CLOUD_ACCESS_TOKEN: '${{steps.auth.outputs.access_token}}'
        PROMPT: '${{ inputs.prompt }}'

branding:
  icon: 'terminal'
  color: 'blue'
